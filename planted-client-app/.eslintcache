[{"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/index.tsx":"1","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/reportWebVitals.ts":"2","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/App.tsx":"3","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Auth.tsx":"4","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/SignUp.tsx":"5","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Login.tsx":"6","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsCreate.tsx":"7","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/Home.tsx":"8","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsIndex.tsx":"9","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantEdit.tsx":"10","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/AppBar.tsx":"11","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/dashboard/Dashboard.tsx":"12","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/comments/CommentCreate.tsx":"13","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/comments/CommentsDisplay.tsx":"14","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/helpers/environment.tsx":"15"},{"size":587,"mtime":1610659454680,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1609359949968,"results":"18","hashOfConfig":"17"},{"size":1182,"mtime":1610659454649,"results":"19","hashOfConfig":"17"},{"size":705,"mtime":1610659454654,"results":"20","hashOfConfig":"17"},{"size":5929,"mtime":1610671120215,"results":"21","hashOfConfig":"17"},{"size":3606,"mtime":1610660126210,"results":"22","hashOfConfig":"17"},{"size":4809,"mtime":1610659454674,"results":"23","hashOfConfig":"17"},{"size":1059,"mtime":1610659454672,"results":"24","hashOfConfig":"17"},{"size":4103,"mtime":1610661405529,"results":"25","hashOfConfig":"17"},{"size":3834,"mtime":1610659454673,"results":"26","hashOfConfig":"17"},{"size":1771,"mtime":1610659454669,"results":"27","hashOfConfig":"17"},{"size":2019,"mtime":1610659454668,"results":"28","hashOfConfig":"17"},{"size":3193,"mtime":1610659454664,"results":"29","hashOfConfig":"17"},{"size":1764,"mtime":1610659454666,"results":"30","hashOfConfig":"17"},{"size":260,"mtime":1610662854807,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"19hwz88",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/index.tsx",[],["66","67"],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/reportWebVitals.ts",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/App.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Auth.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/SignUp.tsx",["68"],"import { Component } from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField } from \"@material-ui/core\";\nimport APIURL from \"../../helpers/environment\";\n\ntype SignUpState = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  profileImg: string;\n  userRole: string;\n  handleopen: boolean;\n};\n\ninterface Props {\n  updateToken: (token: string) => void;\n}\nexport default class SignUp extends Component<Props, SignUpState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      profileImg: \"\",\n      userRole: \"\",\n      handleopen: false,\n    };\n  }\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    //fetch and set value\n    const firstName: string = this.state.firstName;\n    const lastName: string = this.state.lastName;\n    const email: string = this.state.email;\n    const password: string = this.state.password;\n    const profileImg: string = this.state.profileImg;\n    const userRole: string = this.state.userRole;\n\n    // console.log('this.state.firstName', firstName);\n    const url: string = `${APIURL}/user/register`;\n    const bodyObj: SignUpState = {\n      firstName,\n      lastName,\n      email,\n      password,\n      profileImg,\n      userRole,\n      handleopen: true,\n    };\n    // console.log(url);\n    // console.log(bodyObj);\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(bodyObj),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.handleClose();\n        this.props.updateToken(data.token);\n        console.log(\"submit data\", data);\n        console.log(\"data.user\", data.user);\n      });\n    alert(\"User Registration Successful!\");\n  };\n\n  handleOpen = () => {\n    this.setState({\n      handleopen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      handleopen: false,\n    });\n  };\n\n  setFirstName(event: string) {\n    this.setState({\n      firstName: event,\n    });\n  }\n  setLastName(event: string) {\n    this.setState({\n      lastName: event,\n    });\n  }\n  setEmail(event: string) {\n    this.setState({\n      email: event,\n    });\n  }\n  setPassword(event: string) {\n    this.setState({\n      password: event,\n    });\n  }\n  setUserRole(event: string) {\n    this.setState({\n      userRole: event,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.handleOpen} id=\"RegisterButton\" variant=\"outlined\">\n          SIGN UP\n        </Button>\n        <Dialog open={this.state.handleopen} onClose={this.handleClose}>\n          <h2> Hello, Friend! One step closer to channeling your green thumb</h2>\n\n          <DialogContent id=\"RegisterIn\">\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"First name\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setFirstName(e.target.value)}\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Last name\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setLastName(e.target.value)}\n            />\n            <TextField\n              id=\"text\"\n              autoFocus\n              margin=\"dense\"\n              label=\"Email\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setEmail(e.target.value)}\n            />\n            <TextField\n              id=\"text\"\n              autoFocus\n              margin=\"dense\"\n              label=\"Password\"\n              type=\"password\"\n              fullWidth\n              onChange={(e) => this.setPassword(e.target.value)}\n            />\n            <TextField\n              id=\"text\"\n              autoFocus\n              margin=\"dense\"\n              label=\"User/Admin\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setUserRole(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions id=\"Registerbtn\">\n            <Button onClick={this.handleSubmit} id=\"btn\">\n              Sign Up\n            </Button>\n          </DialogActions>\n        </Dialog>\n        {/* <form onSubmit={this.handleSubmit}>\n          <input\n            placeholder=\"first name\"\n            value={this.state.firstName}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ firstName: e.currentTarget.value })}\n          />\n          <br />\n          <input\n            placeholder=\"last name\"\n            value={this.state.lastName}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ lastName: e.currentTarget.value })}\n          />\n          <br />\n          <input\n            type=\"email\"\n            placeholder=\"email\"\n            value={this.state.email}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ email: e.currentTarget.value })}\n          />\n          <br />\n          <input\n            type=\"password\"\n            placeholder=\"password\"\n            value={this.state.password}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ password: e.currentTarget.value })}\n          />\n          <br />\n           <input\n            type=\"profileImg\"\n            placeholder=\"profileImg\"\n            value={this.state.profileImg}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ profileImg: e.currentTarget.value })}\n          />\n          <br />\n          <input\n            placeholder=\"user/admin\"\n            value={this.state.userRole}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ userRole: e.currentTarget.value })}\n          />\n          <br />\n          <button>SIGN UP</button>\n        </form> */}\n      </div>\n    );\n  }\n}\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Login.tsx",["69"],"import { Component } from \"react\";\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport APIURL from \"../../helpers/environment\";\ninterface LoginProps {\n  setToken: (token: string) => void;\n  updateToken: (newToken: string) => void;\n}\ntype LoginState = {\n  email: string;\n  password: string;\n  handleopen: boolean;\n  incorrectPassword: boolean;\n  incorrectEmail: boolean;\n};\n\nexport default class Login extends Component<LoginProps, LoginState> {\n  constructor(props: LoginProps) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      handleopen: false,\n      incorrectPassword: false,\n      incorrectEmail: false,\n    };\n  }\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    console.log(this.state.email);\n\n    const bodyObj: object = {\n      email: this.state.email,\n      password: this.state.password,\n    };\n\n    fetch(`${APIURL}/user/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(bodyObj),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"submit data\", data);\n        console.log(\"data.user\", data.user);\n        this.props.setToken(data.token);\n      });\n    // alert(\"Login Successful!\");\n  };\n\n  handleOpen = () => {\n    this.setState({\n      handleopen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      handleopen: false,\n    });\n  };\n\n  setEmail(event: string) {\n    this.setState({\n      email: event,\n    });\n  }\n\n  setPassword(event: string) {\n    this.setState({\n      password: event,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Welcome back!</h2>\n        <Button onClick={this.handleOpen} id=\"LoginButton\" variant=\"outlined\">\n          LOGIN\n        </Button>\n        <Dialog open={this.state.handleopen} onClose={this.handleClose}>\n          <DialogTitle id=\"dialogTitle\">Please Login</DialogTitle>\n          <DialogContent id=\"Login\">\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Email\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setEmail(e.target.value)}\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Password\"\n              type=\"password\"\n              fullWidth\n              onChange={(e) => this.setPassword(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions id=\"Loginbtn\">\n            <Button onClick={this.handleSubmit}>LOGIN</Button>\n            {/* <Alert onClose={() => {}}>This is a success alert — check it out!</Alert>\n        <Alert\n          action={\n            <Button color=\"inherit\" size=\"small\">\n            </Button>\n          }\n        >\n    \n        </Alert> */}\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\n// <form onSubmit={this.handleSubmit}>\n//           <input\n//             type=\"email\"\n//             placeholder=\"email\"\n//             value={this.state.email}\n//             onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ email: e.currentTarget.value })}\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"password\"\n//             value={this.state.password}\n//             onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ password: e.currentTarget.value })}\n//           />\n//           <button>Login</button>\n//         </form>\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsCreate.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/Home.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsIndex.tsx",["70","71"],"import { Component } from \"react\";\n\nimport PlantsCreate from \"./PlantsCreate\";\nimport { Row, Col } from \"antd\";\nimport logo from \"../../assets/Planted.png\";\n\nimport { Card } from \"@material-ui/core/\";\n\nimport \"./plantsDisplay.css\";\n\nimport PlantEdit from \"./PlantEdit\";\n\nimport APIURL from \"../../helpers/environment\";\n\n// import \"./plantsDisplay.css\";\n\ninterface Props {\n  updateToken: (newToken: string) => void;\n  token: string;\n  plantEdit: any;\n  // fetchPlants:() => void,\n}\n\ntype State = {\n  plantUpdate: any;\n  plantUpdateActive: boolean;\n  plantCreateActive: boolean;\n  userPlants: Array<{\n    id: number;\n    plantName: string;\n    plantImg: string;\n    temperature: string;\n    waterFrequency: string;\n    lastWatering: string;\n    isThriving: boolean;\n  }> | null;\n};\n\nexport default class PlantIndex extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      plantUpdate: {},\n      userPlants: null,\n      plantUpdateActive: false,\n      plantCreateActive: false,\n    };\n  }\n\n  fetchPlants = () => {\n    fetch(`${APIURL}/plants/userplants`, {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"response\", data);\n        this.setState({\n          userPlants: data.userPlants,\n        });\n        console.log(\"tester\", data.userPlants);\n        console.log(\"testing\", this.state.userPlants);\n      });\n  };\n\n  plantDelete = (plant: any) => {\n    fetch(`${APIURL}/plants/${plant.id}`, {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.token,\n      }),\n    }).then(() => this.fetchPlants());\n  };\n\n  componentWillMount() {\n    this.fetchPlants();\n  }\n\n  editUpdateMyPlants = (plant: any) => {\n    this.setState({\n      plantUpdate: plant,\n    });\n  };\n\n  updateOn = () => {\n    this.setState({\n      plantUpdateActive: true,\n    });\n  };\n\n  updateOff = () => {\n    this.setState({\n      plantUpdateActive: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"flex-grid\">\n        <img src={logo} id=\"logo-dis\" alt=\"Logo\" />\n        <h1>Your plants</h1>\n\n        <PlantsCreate token={this.props.token} fetchPlants={this.fetchPlants} />\n        {/* <Grid container direction=\"row\"> */}\n        <Card className=\"row\">\n          {this.state.userPlants\n            ? this.state.userPlants.map((plant) => (\n                <ul key={plant.id}>\n                  <Card className=\"plantCard\">\n                    <li className=\"plantName\">{plant.plantName}</li>\n\n                    <li>\n                      <img className=\"cardImg\" src={plant.plantImg} alt=\"plant\" />\n                    </li>\n                    <li>Temperature: {plant.temperature}</li>\n                    <li>Water Frequency: {plant.waterFrequency}</li>\n                    <li>Last Watering: {plant.lastWatering}</li>\n                    <li>{plant.isThriving}</li>\n                    <button\n                      className=\"cardbtn\"\n                      onClick={() => {\n                        this.editUpdateMyPlants(plant);\n                        this.updateOn();\n                      }}\n                    >\n                      Update\n                    </button>\n                    <button\n                      className=\"cardbtn\"\n                      onClick={() => {\n                        this.plantDelete(plant);\n                      }}\n                    >\n                      Delete\n                    </button>\n                  </Card>\n                </ul>\n              ))\n            : undefined}\n        </Card>\n\n        <br />\n        {this.state.plantUpdateActive ? (\n          <PlantEdit\n            plantUpdate={this.state.plantUpdate}\n            updateOff={this.updateOff.bind(this)}\n            token={this.props.token}\n            fetchItems={this.fetchPlants}\n          />\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  }\n}\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantEdit.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/AppBar.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/dashboard/Dashboard.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/comments/CommentCreate.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/comments/CommentsDisplay.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/helpers/environment.tsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":56,"nodeType":"78","messageId":"79","endLine":2,"endColumn":67},{"ruleId":"76","severity":1,"message":"80","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":13},{"ruleId":"76","severity":1,"message":"81","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":13},{"ruleId":"76","severity":1,"message":"82","line":4,"column":15,"nodeType":"78","messageId":"79","endLine":4,"endColumn":18},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'DialogTitle' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]