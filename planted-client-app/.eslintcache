[{"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/index.tsx":"1","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/reportWebVitals.ts":"2","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/App.tsx":"3","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Auth.tsx":"4","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/SignUp.tsx":"5","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Login.tsx":"6","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsCreate.tsx":"7","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/Home.tsx":"8","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsIndex.tsx":"9","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantEdit.tsx":"10","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/navigation/Navigation.tsx":"11","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/AppBar.tsx":"12"},{"size":587,"mtime":1610230549228,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1609359949968,"results":"15","hashOfConfig":"14"},{"size":1576,"mtime":1610377919637,"results":"16","hashOfConfig":"14"},{"size":569,"mtime":1610232392703,"results":"17","hashOfConfig":"14"},{"size":5917,"mtime":1610208507544,"results":"18","hashOfConfig":"14"},{"size":3641,"mtime":1610232330335,"results":"19","hashOfConfig":"14"},{"size":5005,"mtime":1610373459353,"results":"20","hashOfConfig":"14"},{"size":1262,"mtime":1610335806937,"results":"21","hashOfConfig":"14"},{"size":5519,"mtime":1610379953028,"results":"22","hashOfConfig":"14"},{"size":8901,"mtime":1610372402631,"results":"23","hashOfConfig":"14"},{"size":5561,"mtime":1610312333283,"results":"24","hashOfConfig":"14"},{"size":1843,"mtime":1610334297705,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"19hwz88",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/index.tsx",[],["58","59"],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/reportWebVitals.ts",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/App.tsx",["60","61","62","63","64","65"],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Auth.tsx",[],["66","67"],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/SignUp.tsx",[],"/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/auth/Login.tsx",["68"],"import { Component } from \"react\";\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n\n\ninterface LoginProps {\n  setToken: (token: string) => void;\n  updateToken: (newToken: string) => void\n\n}\ntype LoginState = {\n  email: string;\n  password: string;\n  handleopen: boolean;\n  incorrectPassword: boolean,\n  incorrectEmail: boolean,\n};\n\nexport default class Login extends Component<LoginProps, LoginState> {\n  constructor(props: LoginProps) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      handleopen: false,\n      incorrectPassword: false,\n      incorrectEmail: false,\n    };\n  }\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    console.log(this.state.email);\n\n    const url: string = \"http://localhost:4000/user/login\";\n    const bodyObj: object = {\n      email: this.state.email,\n      password: this.state.password,\n    };\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(bodyObj),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"submit data\", data);\n        console.log(\"data.user\", data.user);\n        this.props.setToken(data.token);\n      });\n      alert('Login Successful!')\n  };\n\n  handleOpen = () => {\n    this.setState({\n      handleopen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      handleopen: false,\n    });\n  };\n\n  setEmail(event: string) {\n    this.setState({\n      email: event,\n    });\n  }\n\n  setPassword(event: string) {\n    this.setState({\n      password: event,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Welcome back!</h2>\n        <Button onClick={this.handleOpen} id=\"LoginButton\" variant=\"outlined\">\n          LOGIN\n        </Button>\n        <Dialog open={this.state.handleopen} onClose={this.handleClose}>\n          <DialogTitle id=\"dialogTitle\">Please Login</DialogTitle>\n          <DialogContent id=\"Login\">\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Email\"\n              type=\"text\"\n              fullWidth\n              onChange={(e) => this.setEmail(e.target.value)}\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Password\"\n              type=\"password\"\n              fullWidth\n              onChange={(e) => this.setPassword(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions id=\"Loginbtn\">\n            <Button onClick={this.handleSubmit} id=\"btn\">\n              LOGIN\n            </Button>\n               {/* <Alert onClose={() => {}}>This is a success alert â€” check it out!</Alert>\n        <Alert\n          action={\n            <Button color=\"inherit\" size=\"small\">\n            </Button>\n          }\n        >\n    \n        </Alert> */}\n          </DialogActions>\n        </Dialog>\n\n      </div>\n    );\n  }\n}\n\n// <form onSubmit={this.handleSubmit}>\n//           <input\n//             type=\"email\"\n//             placeholder=\"email\"\n//             value={this.state.email}\n//             onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ email: e.currentTarget.value })}\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"password\"\n//             value={this.state.password}\n//             onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ password: e.currentTarget.value })}\n//           />\n//           <button>Login</button>\n//         </form>\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsCreate.tsx",["69"],"import { Component, MouseEvent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./plantCreate.css\";\n// import IconButton from '@material-ui/core/IconButton';\nimport { Dialog, TextField, DialogContent, DialogActions } from \"@material-ui/core\";\n\ntype PlantState = {\n  plantName: string;\n  plantImg: string;\n  temperature: string;\n  waterFrequency: string;\n  lastWatering: string;\n  isThriving: boolean;\n  handleopen: boolean;\n};\n\ninterface Props {\n  // plantCreate: any,\n  token: string | null;\n  fetchPlants:()=> void\n}\n\nexport default class PlantCreate extends Component<Props, PlantState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      plantName: \"\",\n      plantImg: \"\",\n      temperature: \"\",\n      waterFrequency: \"\",\n      lastWatering: \"\",\n      isThriving: true,\n      handleopen: true,\n    };\n  }\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    // console.log('oh hi mark')\n    e.preventDefault();\n    //fetch and set value\n    const plantData = new FormData();\n    plantData.append(\"plantName\", this.state.plantName);\n    plantData.append(\"image\", this.state.plantImg);\n    plantData.append(\"temperature\", this.state.temperature);\n    plantData.append(\"waterFrequency\", this.state.waterFrequency);\n    plantData.append(\"lastWatering\", this.state.lastWatering);\n    plantData.append(\"isThriving\", JSON.stringify(this.state.isThriving));\n\n    const url: string = \"http://localhost:4000/plants/create\";\n    fetch(url, {\n      method: \"POST\",\n      body: plantData,\n      headers: new Headers({\n        //  \"Content-Type\": \"application/json\",\n        Authorization: `${this.props.token}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          plantName: \"\",\n          temperature: \"\",\n          waterFrequency: \"\",\n          lastWatering: \"\",\n          isThriving: true,\n        });\n        this.props.fetchPlants();\n        console.log(data);\n      });\n  };\n\n  handleOpen = () => {\n    this.setState({\n      handleopen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      handleopen: false,\n    });\n  };\n\n  handleTrueButton(e: MouseEvent) {\n    e.preventDefault();\n    this.setState({ isThriving: true });\n  }\n  handleFalseButton(e: MouseEvent) {\n    e.preventDefault();\n    this.setState({ isThriving: false });\n  }\n\n  singleFileChangedHandler = (e: any) => {\n    this.setState({\n      plantImg: e.target.files[0],\n    });\n  };\n  //form.addEventListener('submit', (event) => {event.preventDefault(); this.submitForm()});\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.handleOpen} id=\"CreateButton\" variant=\"outlined\">\n          Add a new plant\n        </Button>\n        <Dialog open={this.state.handleopen} onClose={this.handleClose}>\n          <h1>Add a new plant</h1>\n            <DialogContent id=\"register\">\n              <input\n                placeholder=\"plant name\"\n                value={this.state.plantName}\n                onChange={(e: any) => this.setState({ plantName: e.currentTarget.value })}\n              />\n              <br />\n              <input\n                accept=\"image/*\"\n                className=\"imgInput\"\n                id=\"contained-button-file\"\n                onChange={this.singleFileChangedHandler}\n                //multiple\n                type=\"file\"\n              />\n              <br />\n              <input\n                type=\"temperature\"\n                placeholder=\"temperature\"\n                value={this.state.temperature}\n                onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                  this.setState({ temperature: e.currentTarget.value })\n                }\n              />\n              <br />\n              <input\n                type=\"waterFrequency\"\n                placeholder=\"waterFrequency\"\n                value={this.state.waterFrequency}\n                onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                  this.setState({ waterFrequency: e.currentTarget.value })\n                }\n              />\n              <br />\n              <input\n                type=\"lastWatering\"\n                placeholder=\"lastWatering\"\n                value={this.state.lastWatering}\n                onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                  this.setState({ lastWatering: e.currentTarget.value })\n                }\n              />\n              <br />\n              <h3>Is your plant thriving?</h3>\n              <button className=\"btn\" onClick={this.handleTrueButton.bind(this)}>\n                True\n              </button>\n              <button className=\"btn\" onClick={this.handleFalseButton.bind(this)}>\n                False\n              </button>\n              <br />\n            </DialogContent>\n            <DialogActions id=\"Createbtn\">\n              <Button onClick={this.handleSubmit} id=\"btn\">\n                Add Plant\n              </Button>\n            </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/Home.tsx",["70","71","72","73","74","75"],"import React, { Component } from \"react\";\n import { BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\n// import SignUp from '../auth/SignUp'\n// import Login from '../auth/Login'\nimport Auth from \"../auth/Auth\";\nimport AppBar from './AppBar'\n// import PlantsCreate from '../plants/PlantsCreate'\n// import PlantDisplay from '../plants/PlantsDisplay'\nimport PlantsIndex from \"../plants/PlantsIndex\";\n// import PlantCard from '../plants/PlantCard'\n// import {History} from 'history'\n\ninterface Props {\n  updateToken: (newToken: string) => void;\n  clearToken: () => void;\n  token: string;\n  plantEdit:any;\n  // plantId: number;\n  // history:History\n  // fetchPlants:()=> void,\n  //  plantCreate: any,\n}\n\nexport default class Home extends React.Component<Props> {\n  render() {\n    return (\n        <Router>\n      <div className=\"homeDiv\">\n        <div>\n            <div className=\"container\">\n                <AppBar clickLogout={this.props.clearToken} updateToken={this.props.updateToken} token={this.props.token} />\n               <PlantsIndex plantEdit={this.props.plantEdit} updateToken={this.props.updateToken} token={this.props.token} />\n              \n            </div>\n        </div>\n      </div>\n        </Router>\n    );\n  }\n}\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantsIndex.tsx",["76","77"],"import { Component } from \"react\";\n\nimport PlantsCreate from \"./PlantsCreate\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport PlantEdit from \"./PlantEdit\";\n\n// import \"./plantsDisplay.css\";\n\ninterface Props {\n  updateToken: (newToken: string) => void;\n  token: string;\n  plantEdit: any;\n  // fetchPlants:() => void,\n}\n\ntype State = {\n  plantUpdate: any;\n  plantUpdateActive: boolean;\n  plantCreateActive: boolean;\n  userPlants: Array<{\n    id: number;\n    plantName: string;\n    plantImg: string;\n    temperature: string;\n    waterFrequency: string;\n    lastWatering: string;\n    isThriving: boolean;\n  }> | null;\n};\n\nexport default class PlantIndex extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      plantUpdate: {},\n      userPlants: null,\n      plantUpdateActive: false,\n      plantCreateActive: false,\n    };\n  }\n\n  fetchPlants = () => {\n    fetch(\"http://localhost:4000/plants/userplants\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"response\", data);\n        this.setState({\n          userPlants: data.userPlants,\n        });\n        console.log(\"tester\", data.userPlants);\n        console.log(\"testing\", this.state.userPlants);\n      });\n  };\n\n  plantDelete = (plant: any) => {\n    fetch(`http://localhost:4000/plants/${plant.id}`, {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.token,\n      }),\n    }).then(() => this.fetchPlants());\n  };\n\n  componentWillMount() {\n    this.fetchPlants();\n  }\n\n  editUpdateMyPlants = (plant: any) => {\n    this.setState({\n      plantUpdate: plant,\n    });\n  };\n\n  updateOn = () => {\n    this.setState({\n      plantUpdateActive: true,\n    });\n  };\n\n  updateOff = () => {\n    this.setState({\n      plantUpdateActive: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"plantsDis\">\n        <PlantsCreate token={this.props.token} fetchPlants={this.fetchPlants} />\n\n        {this.state.userPlants\n          ? this.state.userPlants.map((plant) => (\n              <ul key={plant.id}>\n                {/* <button onClick={this.updateOn} >\n                {this.state.plantUpdateActive ? \n        <PlantEdit  plantUpdate={this.state.plantUpdate}\n              updateOff={this.updateOff.bind(this)}\n              token={this.props.token}\n               />\n               : <></>\n               } \n            </button> */}\n\n                {/* <button onClick={() => {this.plantDelete(plant)}}></button> */}\n                {/* {this.state.plantUpdateActive ? \n        <PlantEdit plantId={plant.id} plantUpdate={this.state.plantUpdate}\n              updateOff={this.updateOff.bind(this)}\n              token={this.props.token}\n               />\n               : <></>\n               } */}\n                <Card>\n                  <li>{plant.plantName}</li>\n                  <li>\n                    <img width=\"140px\" height=\"140px\" src={plant.plantImg} alt=\"plant\" />\n                  </li>\n                  <li>Temperature: {plant.temperature}</li>\n                  <li>Water Frequency: {plant.waterFrequency}</li>\n                  <li>Last Watering: {plant.lastWatering}</li>\n                  <li>{plant.isThriving}</li>\n                  <button\n                    onClick={() => {\n                      this.editUpdateMyPlants(plant);\n                      this.updateOn();\n                    }}\n                  >\n                    Update\n                  </button>\n                  <button\n                    onClick={() => {\n                      this.plantDelete(plant);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </Card>\n              </ul>\n            ))\n          : undefined}\n        <h1>Hello</h1>\n        {/* <button onClick={this.editUpdateMyPlants} >\n                {this.state.plantUpdateActive ? \n                  <PlantEdit plantId={this.plant.id.bind(this)} plantUpdate={this.state.plantUpdate}\n                  updateOff={this.updateOff.bind(this)}\n                  token={this.props.token}\n                  />\n                  : <></>\n                } \n                </button>\n              */}\n        <br />\n\n        {/* <button onClick={this.updateOn}>\n                     {this.state.plantUpdateActive ? \n             <PlantEdit  plantUpdate={this.state.plantUpdate}\n                   updateOff={this.updateOff.bind(this)}\n                   token={this.props.token}\n                    />\n                    : <>Button</>\n                    } \n                </button>\n                 <h1>Tesing</h1> */}\n        {/* {this.state.plantUpdateActive ? \n        <PlantEdit plantUpdate={this.state.plantUpdate}\n              updateOff={this.updateOff.bind(this)}\n              token={this.props.token}\n               />\n               : <></>\n               } */}\n        {this.state.plantUpdateActive ? (\n          <PlantEdit\n            plantUpdate={this.state.plantUpdate}\n            updateOff={this.updateOff.bind(this)}\n            token={this.props.token}\n            fetchItems={this.fetchPlants}\n          />\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  }\n}\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/plants/PlantEdit.tsx",["78","79","80"],"import { Component } from \"react\";\n\nimport React from \"react\";\n//Reactstrap\nimport { Button, Form, FormGroup, Label, Input, Modal, ModalHeader, ModalBody } from \"reactstrap\";\n//Material UI\nimport TextField from \"@material-ui/core/TextField\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n// import CreateIcon from \"@material-ui/icons/Create\";\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\n// import APIURL from \"../../../../helpers/environment\";\n\ntype Props = {\n  plantUpdate: any;\n  updateOff: () => void;\n  token: string;\n  fetchItems: () => void;\n};\n\ntype State = {\n  editPlantName: string;\n  plantImg: string;\n  editTemperature: string;\n  editWaterFrequency: string;\n  editLastWatering: string;\n};\n\nexport default class PlantEdit extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      editPlantName: this.props.plantUpdate.plantName,\n      plantImg: '',\n      editTemperature: this.props.plantUpdate.temperature,\n      editWaterFrequency: this.props.plantUpdate.waterFrequency,\n      editLastWatering:this.props.plantUpdate.lastWatering,\n    };\n  }\n\n  // editPlantPhoto = () => {\n  //   const editPetPictureData = new FormData();\n  //   editPetPictureData.append(\"image\", this.state.plantImg);\n  //   fetch(`http://localhost:4000/plants/update/${this.props.plantId}`, {\n  //     method: \"PUT\",\n  //     headers: new Headers({\n  //       Authorization: this.props.token,\n  //     }),\n  //     body: editPetPictureData,\n  //   })\n  //     .then((res) => res.json())\n  //     .catch((err) => console.log(err));\n  // };\n\n  handlePlantUpdate = (e: any) => {\n    e.preventDefault();\n    fetch(`http://localhost:4000/plants/update/${this.props.plantUpdate.id}`, {\n      method: \"PUT\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.token,\n      }),\n      body: JSON.stringify({\n        plantName: this.state.editPlantName,\n        temperature: this.state.editTemperature,\n        waterFrequency: this.state.editWaterFrequency,\n        lastWatering: this.state.editLastWatering,\n      }),\n    })\n      .then(() => {\n        // this.props.fetchPlants();\n        this.props.updateOff();\n        this.makeEditWork();\n        this.props.fetchItems();\n      });\n  };\n\n  makeEditWork = () => {\n    setTimeout(() => {\n      window.location.reload();\n    }, 3000);\n  };\n\n  closeUpdateModal = () => {\n    this.props.updateOff();\n  };\n\n  singleFileChangedHandler = (e: any) => {\n    this.setState({\n      plantImg: e.target.files[0],\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Modal className=\"create-plant-modal\" isOpen={true}>\n          <ModalHeader>\n            Edit Plant\n            <IconButton className=\"exit-btn\" onClick={this.closeUpdateModal}>\n              <ClearIcon />\n            </IconButton>\n          </ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.handlePlantUpdate}>\n            \n              <FormGroup>\n                <TextField\n                  className=\"modal-text-field\"\n                  value={this.state.editPlantName}\n                  onChange={(e) => this.setState({ editPlantName: e.target.value })}\n                  label=\"Edit Plant Name\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <TextField\n                  className=\"modal-text-field\"\n                  value={this.state.editTemperature}\n                  onChange={(e) => this.setState({ editTemperature: e.target.value })}\n                  label=\"Edit Temperature\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <TextField\n                  className=\"modal-text-field\"\n                  value={this.state.editWaterFrequency}\n                  onChange={(e) => this.setState({ editWaterFrequency: e.target.value })}\n                  label=\"Edit water frequency\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <TextField\n                  className=\"modal-text-field\"\n                  value={this.state.editLastWatering}\n                  onChange={(e) => this.setState({ editLastWatering: e.target.value })}\n                  label=\"Update last watering\"\n                />\n                \n            <button type='submit'>Update changes</button>\n              </FormGroup>\n              <br />\n            </Form>\n          </ModalBody>\n        </Modal>\n      </>\n    );\n  }\n}\n\n// import {\n//    DialogContent,\n// } from '@material-ui/core';\n\n// type Props = {\n//   token: string;\n//   plantEdit:any;\n// };\n\n// type State = {\n//   editplantName: string;\n//   editplantImg: string;\n//   edittemperature: string;\n//   editwaterFrequency: string;\n//   editlastWatering: string;\n//   // editIsThriving: boolean;\n// };\n\n// export default class PlantEdit extends Component<Props, State> {\n//   constructor(props: Props) {\n//     super(props);\n//     this.state = {\n//       editplantName: this.props.plantEdit.plantName,\n//       editplantImg: \"\",\n//       edittemperature: this.props.plantEdit.temperature,\n//       editwaterFrequency: this.props.plantEdit.waterFrequency,\n//       editlastWatering: this.props.plantEdit.lastWatering,\n//       // editIsThriving: this.state.editIsThriving,\n//     };\n//   }\n\n//   editPlantPhoto = () => {\n//     const editPlantPictureData = new FormData();\n//     editPlantPictureData.append(\"image\", this.state.editplantImg);\n//     fetch(\"http://localhost:4000/plants/update/id\", {\n//       method: \"PUT\",\n//       body: editPlantPictureData,\n//       headers: new Headers({\n//         Authorization: this.props.token,\n//       }),\n//     })\n//       .then((res) => res.json())\n//       .catch((err) => console.log(err));\n//   };\n\n//   handlePlantUpdate = (e: any) => {\n//     e.preventDefault();\n//     fetch(\"http://localhost:4000/plants/update/id\", {\n//       method: \"PUT\",\n//       body: JSON.stringify({\n//         plantName: this.state.editplantName,\n//         temperature: this.state.edittemperature,\n//         waterFrenquency: this.state.editwaterFrequency,\n//         lastWatering: this.state.editlastWatering,\n//         // isThriving: this.state.editIsThriving,\n//       }),\n//       headers: new Headers({\n//         \"Content-Type\": \"application/json\",\n//         Authorization: this.props.token,\n//       }),\n//     })\n//       .then(() => {\n//         this.editPlantPhoto();\n//       })\n//       .then(() => {\n//         console.log('testing homie')\n//       });\n//   };\n\n//   singleFileChangedHandler = (e: any) => {\n//     this.setState({\n//       editplantImg: e.target.files[0],\n//     });\n//   };\n\n//   // handleTrueButton(e: MouseEvent) {\n//   //   e.preventDefault();\n//   //   this.setState({ isThriving: true })\n//   // }\n//   // handleFalseButton(e: MouseEvent) {\n//   //   e.preventDefault();\n//   //   this.setState({ isThriving: false })\n//   // }\n\n//  render() {\n//    return(\n//     <form onSubmit={this.handlePlantUpdate}  >\n//     <DialogContent id=\"Register\">\n//       <input\n//         placeholder=\"plant name\"\n//         value={this.state.editplantName}\n//         onChange={(e: any) => this.setState({ editplantName: e.currentTarget.value })}\n//       />\n//       <br />\n//       <input\n//     accept=\"image/*\"\n//     className='imgInput'\n//     id=\"contained-button-file\"\n//     onChange={this.singleFileChangedHandler}\n//     multiple\n//     type=\"file\"\n//   />\n//   {/* <label htmlFor=\"contained-button-file\"> */}\n//     {/* <Button variant=\"contained\" color=\"primary\" component=\"span\">\n//       Upload\n//     </Button> */}\n//   {/* </label> */}\n//       <br />\n//       <input\n//         type=\"temperature\"\n//         placeholder=\"temperature\"\n//         value={this.state.edittemperature}\n//         onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ edittemperature: e.currentTarget.value })}\n//       />\n//       <br />\n//       <input\n//         type=\"waterFrequency\"\n//         placeholder=\"waterFrequency\"\n//         value={this.state.editwaterFrequency}\n//         onChange={(e: React.FormEvent<HTMLInputElement>) =>\n//           this.setState({ editwaterFrequency: e.currentTarget.value })\n//         }\n//       />\n//       <br />\n//       <input\n//         type=\"lastWatering\"\n//         placeholder=\"lastWatering\"\n//         value={this.state.editlastWatering}\n//         onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({ editlastWatering: e.currentTarget.value })}\n//       />\n//       <br />\n//       {/* <h3>Is your plant thriving?</h3>\n//       <button className=\"btn\" onClick={this.handleTrueButton.bind(this)}>\n//         True\n//       </button>\n//       <button className=\"btn\" onClick={this.handleFalseButton.bind(this)}>\n//         False\n//       </button>\n//       <br/> */}\n//       <button className=\"btn\">Edit Plant</button>\n//       </DialogContent>\n//   </form>\n//    )\n//  }\n\n// }\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/navigation/Navigation.tsx",["81","82","83"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: \"none\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  }),\n);\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n          Planted\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {['Login', 'Signup', 'Community', \"Plants\"].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Typography paragraph>\n          Planted, a community that makes taking care of your plants easier. Providing a way for you to track your\n          plants health. Here at Planted we want to see your plants THRIVE!\n        </Typography>\n        <Typography paragraph>\n          <h1>Discover</h1>\n          <h4>\n            These plants are the best to start your collection. Easy to grow and can generally withstand erractic\n            watering, bad lighting and fluctating temperatures. Find your inner green thumb with these and discover\n            endless possibilities.\n          </h4>\n        </Typography>\n      </main>\n    </div>\n  );\n}\n\n// <Typography paragraph>\n// Planted, a community that makes taking care of your plants easier. Providing a way for you to track your\n// plants health. Here at Planted we want to see your plants THRIVE!\n// </Typography>\n// <Typography paragraph>\n// <h1>Discover</h1>\n// <h4>\n//   These plants are the best to start your collection. Easy to grow and can generally withstand erractic\n//   watering, bad lighting and fluctating temperatures. Find your inner green thumb with these and discover\n//   endless possibilities.\n// </h4>\n// </Typography>\n","/Users/januaryobrien/Desktop/ElevenFiftyProjects/WDOctober2020/Planted-Server/Planted-Client/Planted-Client/planted-client-app/src/components/home/AppBar.tsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":35,"nodeType":"90","messageId":"91","endLine":3,"endColumn":40},{"ruleId":"88","severity":1,"message":"92","line":3,"column":42,"nodeType":"90","messageId":"91","endLine":3,"endColumn":48},{"ruleId":"88","severity":1,"message":"93","line":3,"column":50,"nodeType":"90","messageId":"91","endLine":3,"endColumn":54},{"ruleId":"88","severity":1,"message":"94","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":12},{"ruleId":"88","severity":1,"message":"95","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":8,"column":8,"nodeType":"90","messageId":"91","endLine":8,"endColumn":18},{"ruleId":"84","replacedBy":"97"},{"ruleId":"86","replacedBy":"98"},{"ruleId":"88","severity":1,"message":"99","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"100","line":5,"column":18,"nodeType":"90","messageId":"91","endLine":5,"endColumn":27},{"ruleId":"88","severity":1,"message":"101","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"89","line":2,"column":36,"nodeType":"90","messageId":"91","endLine":2,"endColumn":41},{"ruleId":"88","severity":1,"message":"92","line":2,"column":43,"nodeType":"90","messageId":"91","endLine":2,"endColumn":49},{"ruleId":"88","severity":1,"message":"102","line":2,"column":51,"nodeType":"90","messageId":"91","endLine":2,"endColumn":59},{"ruleId":"88","severity":1,"message":"93","line":2,"column":61,"nodeType":"90","messageId":"91","endLine":2,"endColumn":65},{"ruleId":"88","severity":1,"message":"94","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":12},{"ruleId":"88","severity":1,"message":"103","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":19},{"ruleId":"88","severity":1,"message":"104","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":17},{"ruleId":"88","severity":1,"message":"105","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":16},{"ruleId":"88","severity":1,"message":"106","line":5,"column":35,"nodeType":"90","messageId":"91","endLine":5,"endColumn":40},{"ruleId":"88","severity":1,"message":"107","line":5,"column":42,"nodeType":"90","messageId":"91","endLine":5,"endColumn":47},{"ruleId":"88","severity":1,"message":"108","line":16,"column":8,"nodeType":"90","messageId":"91","endLine":16,"endColumn":20},{"ruleId":"88","severity":1,"message":"109","line":18,"column":8,"nodeType":"90","messageId":"91","endLine":18,"endColumn":17},{"ruleId":"88","severity":1,"message":"110","line":19,"column":8,"nodeType":"90","messageId":"91","endLine":19,"endColumn":16},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'Auth' is defined but never used.","'AppBar' is defined but never used.","'Navigation' is defined but never used.",["111"],["112"],"'Alert' is defined but never used.","'TextField' is defined but never used.","'Component' is defined but never used.","'Redirect' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Button' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'ListItemIcon' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]